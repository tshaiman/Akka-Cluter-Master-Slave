//
//#This dispatcher is not used for Edge , only for the Node worker project
//custom-dv-dispatcher {
//  # Dispatcher is the name of the event-based dispatcher
//  type = Dispatcher
//  # What kind of ExecutionService to use
//  executor = "thread-pool-executor"
//  # Configuration for the thread pool
//  thread-pool-executor {
//    # minimum number of threads to cap factor-based core number to
//    core-pool-size-min = 8
//    # No of core threads ... ceil(available processors * factor)
//    core-pool-size-factor = 2.0
//    # maximum number of threads to cap factor-based number to
//    core-pool-size-max = 64d
//  }
//  # Throughput defines the maximum number of messages to be
//  # processed per actor before the thread jumps to the next actor.
//  # Set to 1 for as fair as possible.
//  throughput = 1
//}

my-blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    // or in Akka 2.4.2+
    fixed-pool-size = 200
  }
  throughput = 1
}

akka {
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
  akka.actor.allow-java-serialization = off
  loglevel = "INFO"
  actor {
    log-remote-lifecycle-events = off
    provider = cluster
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }
    serialization-bindings {
      //"com.dv.akka.common.models.ImpressionMessage" = proto
      "com.dv.akka.ImpressionMessage" = kryo
    }
    default-dispatcher {
      fork-join-executor {
        parallelism-max = 16
      }
    }

//    default-dispatcher {
//      type = "Dispatcher"
//      executor = "thread-pool-executor"
//
//      thread-pool-executor {
//        fixed-pool-size = 256
//      }
//
//      throughput = 2
//    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      //port = 0
    }
  }

//  remote {
//    artery {
//      enabled = on
//      transport = aeron-udp
//    }
//  }

  cluster {
    #seed-nodes = ["akka.tcp://ClusterSystem@172.25.0.43:2551"]
    seed-nodes = ["akka://ClusterSystem@127.0.0.1:2551"]
    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #auto-down-unreachable-after = 10s
  }

  http{
    server{
      idle-timeout = 60 s
      pipelining-limit = 1024 # The maximum number of requests that are accepted (and dispatched to the application) on one single connection before the first request has to be completed. This value must be > 0 and <= 1024.
      request-timeout = 8 s
      connecting-timeout = 20 s # The time period within which the TCP connecting process must be completed.
      max-connections = 1024
    }
  }
}

//WorkerGateway cluster route
akka.actor.deployment {
  /usr/myWorker = {
    router = cluster-metrics-adaptive-group
    metrics-selector = mix
    routees.paths = ["/user/worker"]
    cluster {
      enabled = on
      use-roles = ["backend"]
      allow-local-routees = on
      totalInstances = 100
    }

  }
}

# Enable metrics extension in akka-cluster-metrics.
#akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
#akka.cluster.metrics.native-library-extract-folder = ${user.dir}/target/native
